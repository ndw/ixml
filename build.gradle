buildscript {
  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://dev.saxonica.com/maven"
    }
  }

  configurations.all {
    resolutionStrategy {
      force 'xml-apis:xml-apis:1.4.01',
        "${saxonGroup}:${saxonEdition}:${saxonVersion}",
        "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
    }
  }

  dependencies {
    classpath group: saxonGroup, name: saxonEdition, version: saxonVersion
    classpath group: 'com.nwalsh', name: 'sinclude', version: sincludeVersion
    classpath group: 'org.xmlresolver', name: 'xmlresolver', version: xmlresolverVersion
  }
}

plugins {
  id 'java'
  id 'com.nwalsh.gradle.saxon.saxon-gradle' version '0.9.6'
  id 'com.nwalsh.gradle.relaxng.validate' version '0.0.6'
  id 'com.nwalsh.gradle.relaxng.translate' version '0.0.6'
}

import com.nwalsh.gradle.saxon.SaxonXsltTask
import com.nwalsh.gradle.relaxng.validate.RelaxNGValidateTask
import com.nwalsh.gradle.relaxng.translate.RelaxNGTranslateTask

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url "https://dev.saxonica.com/maven"
  }
}

configurations.all {
  resolutionStrategy {
    force 'xml-apis:xml-apis:1.4.01',
      "${saxonGroup}:${saxonEdition}:${saxonVersion}",
      "org.xmlresolver:xmlresolver:${xmlresolverVersion}"
  }
}

configurations {
  xform.extendsFrom(implementation)
}

dependencies {
  implementation (
    [group: saxonGroup, name: saxonEdition, version: saxonVersion],
    [group: 'org.relaxng', name: 'jing', version: jingVersion ],
    [group: 'org.relaxng', name: 'trang', version: jingVersion ],
    [group: 'org.xmlresolver', name: 'xmlresolver', version: xmlresolverVersion],
    [group: 'com.nwalsh', name: 'sinclude', version: sincludeVersion ],
    [group: 'org.slf4j', name: 'slf4j-simple', version: slf4jVersion ],
  )
}

def getenv(String name) {
  if (System.getenv(name) == null) {
    return ""
  } else {
    return System.getenv(name)
  }
}

println("Building with Java version ${System.getProperty('java.version')}")
if (getenv('CIWORKFLOW') != '') {
  println("Building for CI commit ${getenv('CI_SHA1')}");
  println("Building for CI branch ${getenv('CI_BRANCH')}");
} else {
  println("Building locally...")
}

defaultTasks 'publish'

saxon.configure {
  initializer 'com.nwalsh.xslt.Register'
}

task publish(
  group: "publish",
  dependsOn: ["formatSpec", "copyResources", "ixmlInXml", "ixmlInIxml", 'xformGuide'],
  description: "Publish the current specification") {
}

task formatSpec(
  type: JavaExec,
  description: "Copy the specification into the build directory"
) {
  inputs.files fileTree(dir: "${projectDir}/src")
  outputs.file "${buildDir}/current/index.html"

  classpath = configurations.xform
  mainClass = "net.sf.saxon.Transform"
  args "-s:${projectDir}/src/ixml-specification.html",
    "-xsl:${projectDir}/build-tools/format.xsl",
    "-o:${buildDir}/current/index.html",
    "ci-sha1=${getenv('CI_SHA1')}",
    "ci-build-num=${getenv('CI_BUILD_NUM')}",
    "ci-project-username=${getenv('CI_PROJECT_USERNAME')}",
    "ci-project-reponame=${getenv('CI_PROJECT_REPONAME')}",
    "ci-branch=${getenv('CI_BRANCH')}",
    "ci-tag=${getenv('CI_TAG')}",
    "ci-pull=${getenv('CI_PULL')}"
}

task copyResources(
  description: "Copy the other resources into the build directory"
) {
  inputs.files fileTree(dir: "${projectDir}/src/js")
  inputs.files fileTree(dir: "${projectDir}/src/css")
  outputs.files fileTree(dir: "${buildDir}/current/js")
  outputs.files fileTree(dir: "${buildDir}/current/css")
  outputs.file "${buildDir}/current/ixml.ixml"
  outputs.file "${buildDir}/current/ixml.xml"
  outputs.file "${buildDir}/current/errata.html"

  doLast {
    copy {
      into "${buildDir}/current"
      from "${projectDir}/src"
      include "css/**"
      include "js/**"
      include "ixml.ixml"
      include "ixml.xml"
      include "errata.html"
    }
  }
}

task ixmlInXml(
  type: JavaExec,
  description: "Format ixml.xml for the web"
) {
  inputs.files fileTree(dir: "${projectDir}/build-tools")
  inputs.file "${projectDir}/src/ixml.xml"
  outputs.file "${buildDir}/current/ixml.xml.html"

  classpath = configurations.xform
  mainClass = "net.sf.saxon.Transform"
  args "-s:${projectDir}/src/ixml.xml",
    "-xsl:${projectDir}/build-tools/format-xml.xsl",
    "-o:${buildDir}/current/ixml.xml.html"
}

task ixmlInIxml(
  type: JavaExec,
  description: "Format ixml.ixml for the web"
) {
  inputs.files fileTree(dir: "${projectDir}/build-tools")
  inputs.file "${projectDir}/src/ixml.ixml"
  outputs.file "${buildDir}/current/ixml.ixml.html"

  classpath = configurations.xform
  mainClass = "net.sf.saxon.Transform"
  args "-it",
    "-xsl:${projectDir}/build-tools/format-ixml.xsl",
    "-o:${buildDir}/current/ixml.ixml.html",
    "ixml.ixml=${projectDir}/src/ixml.ixml"
}
    
// ============================================================

task ixmlRng(
  type: SaxonXsltTask,
  dependsOn: ["ixmlInXml", 'copyResources']
) {
  input "${buildDir}/current/ixml.xml"
  stylesheet "${projectDir}/tools/ixml-to-rng.xsl"
  output "${buildDir}/ixml.rng"
}

task guideResources(
  type: Copy
) {
  into "${buildDir}/xmlguide/css"
  from "${projectDir}/xmlguide/css"
}

task xformGuide(
  type: SaxonXsltTask,
  dependsOn: ["ixmlRng", "guideResources"]
) {
  inputs.dir "${projectDir}/xmlguide"

  input "${projectDir}/xmlguide/xml/guide.xml"
  stylesheet "${projectDir}/xmlguide/xsl/compose.xsl"
  output "${buildDir}/xmlguide/index.html"
  parameters(
    "ixml.rng": "${buildDir}/ixml.rng"
  )
}
